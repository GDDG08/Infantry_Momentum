<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Infantry_Momentum\Infantry_Momentum.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Infantry_Momentum\Infantry_Momentum.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue May 18 05:17:24 2021
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[77]">BusComm_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">BusComm_Task</a><BR>
 <LI><a href="#[17]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">BusFault_Handler</a><BR>
 <LI><a href="#[79]">Chassis_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">Chassis_Task</a><BR>
 <LI><a href="#[76]">Gimbal_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">Gimbal_Task</a><BR>
 <LI><a href="#[15]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">HardFault_Handler</a><BR>
 <LI><a href="#[16]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">MemManage_Handler</a><BR>
 <LI><a href="#[7c]">MiniPC_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7c]">MiniPC_Task</a><BR>
 <LI><a href="#[14]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">NMI_Handler</a><BR>
 <LI><a href="#[7d]">Referee_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">Referee_Task</a><BR>
 <LI><a href="#[78]">Remote_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">Remote_Task</a><BR>
 <LI><a href="#[7b]">Shoot_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">Shoot_Task</a><BR>
 <LI><a href="#[75]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">StartDefaultTask</a><BR>
 <LI><a href="#[7a]">SuperCap_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">SuperCap_Task</a><BR>
 <LI><a href="#[18]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">UsageFault_Handler</a><BR>
 <LI><a href="#[7e]">WatchDog_Task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">WatchDog_Task</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[77]">BusComm_Task</a> from freertos.o(i.BusComm_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[17]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[31]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[30]">CAN1_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5d]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5a]">CAN2_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[79]">Chassis_Task</a> from freertos.o(i.Chassis_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[28]">DMA1_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[23]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[24]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[25]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">EXTI4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">EXTI9_5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4d]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[76]">Gimbal_Task</a> from freertos.o(i.Gimbal_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[69]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">I2C2_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">I2C2_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7c]">MiniPC_Task</a> from freertos.o(i.MiniPC_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[14]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5e]">OTG_FS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1e]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[22]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[20]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7d]">Referee_Task</a> from freertos.o(i.Referee_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[78]">Remote_Task</a> from freertos.o(i.Remote_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[13]">Reset_Handler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">SDIO_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7b]">Shoot_Task</a> from freertos.o(i.Shoot_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[75]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[7a]">SuperCap_Task</a> from freertos.o(i.SuperCap_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[1c]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[1f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[35]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[36]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">TIM2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3b]">TIM4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">TIM5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[53]">TIM6_DAC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">TIM7_IRQHandler</a> from stm32f4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from stm32f4xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6e]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[42]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1d]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7e]">WatchDog_Task</a> from freertos.o(i.WatchDog_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[d]">_send_chassis_fb</a> from buscomm_cmd.o(i._send_chassis_fb) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[c]">_send_chassis_lr</a> from buscomm_cmd.o(i._send_chassis_lr) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[f]">_send_imu_pos</a> from buscomm_cmd.o(i._send_imu_pos) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[e]">_send_imu_spd</a> from buscomm_cmd.o(i._send_imu_spd) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[11]">_send_mode</a> from buscomm_cmd.o(i._send_mode) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[12]">_send_ui_data</a> from buscomm_cmd.o(i._send_ui_data) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[10]">_send_yaw_ref</a> from buscomm_cmd.o(i._send_yaw_ref) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[2]">_set_17mm_data</a> from buscomm_cmd.o(i._set_17mm_data) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[a]">_set_cap_state</a> from buscomm_cmd.o(i._set_cap_state) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[8]">_set_cha_fb</a> from buscomm_cmd.o(i._set_cha_fb) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[9]">_set_cha_lr</a> from buscomm_cmd.o(i._set_cha_lr) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[3]">_set_colling_data</a> from buscomm_cmd.o(i._set_colling_data) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[6]">_set_imu_pos</a> from buscomm_cmd.o(i._set_imu_pos) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[7]">_set_imu_spd</a> from buscomm_cmd.o(i._set_imu_spd) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[4]">_set_mode</a> from buscomm_cmd.o(i._set_mode) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[1]">_set_robot_id_power_limit</a> from buscomm_cmd.o(i._set_robot_id_power_limit) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[b]">_set_ui_data</a> from buscomm_cmd.o(i._set_ui_data) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[5]">_set_yaw_ref</a> from buscomm_cmd.o(i._set_yaw_ref) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[0]">_set_yaw_relative_angle</a> from buscomm_cmd.o(i._set_yaw_relative_angle) referenced 2 times from buscomm_cmd.o(.data)
 <LI><a href="#[6f]">chassis_encoder_callback</a> from motor_periph.o(i.chassis_encoder_callback) referenced from motor_periph.o(i.Motor_InitAllMotors)
 <LI><a href="#[71]">feeder_encoder_callback</a> from motor_periph.o(i.feeder_encoder_callback) referenced from motor_periph.o(i.Motor_InitAllMotors)
 <LI><a href="#[70]">gimbal_encoder_callback</a> from motor_periph.o(i.gimbal_encoder_callback) referenced from motor_periph.o(i.Motor_InitAllMotors)
 <LI><a href="#[6b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[74]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[73]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[72]">shooter_encoder_callback</a> from motor_periph.o(i.shooter_encoder_callback) referenced from motor_periph.o(i.Motor_InitAllMotors)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[1e3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[95]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e0]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1df]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e9]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_DecodeBusCommData
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1eb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
</UL>

<P><STRONG><a name="[1ed]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_JudgeChange
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Bessel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_HeatCtrl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Bessel
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Bessel
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooterMotor
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_HeatCtrl
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooterMotor
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_HeatCtrl
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_HeatCtrl
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_JudgeChange
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Bessel
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_JudgeChange
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Bessel
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooterMotor
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ee]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ef]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1f0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1f2]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[80]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>arm_mat_add_f32</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, arm_mat_add_f32.o(.text.arm_mat_add_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcPredict
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcKFGain
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcCorrect
</UL>

<P><STRONG><a name="[12f]"></a>arm_mat_init_f32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_mat_init_f32.o(.text.arm_mat_init_f32))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Predict_nT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcPredict
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcKFGain
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcCorrect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CVKalmanInit
</UL>

<P><STRONG><a name="[96]"></a>arm_mat_inverse_f32</STRONG> (Thumb, 720 bytes, Stack size 80 bytes, arm_mat_inverse_f32.o(.text.arm_mat_inverse_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcKFGain
</UL>

<P><STRONG><a name="[131]"></a>arm_mat_mult_f32</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, arm_mat_mult_f32.o(.text.arm_mat_mult_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Predict_nT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcPredict
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcKFGain
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcCorrect
</UL>

<P><STRONG><a name="[132]"></a>arm_mat_sub_f32</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, arm_mat_sub_f32.o(.text.arm_mat_sub_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_mat_sub_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcCorrect
</UL>

<P><STRONG><a name="[135]"></a>arm_mat_trans_f32</STRONG> (Thumb, 178 bytes, Stack size 44 bytes, arm_mat_trans_f32.o(.text.arm_mat_trans_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcPredict
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcKFGain
</UL>

<P><STRONG><a name="[98]"></a>BusComm_CANRxCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buscomm_ctrl.o(i.BusComm_CANRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BusComm_CANRxCallback &rArr; BusComm_DecodeBusCommData &rArr; BusComm_VerifyBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_DecodeBusCommData
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_RxMessageCallback
</UL>

<P><STRONG><a name="[99]"></a>BusComm_DecodeBusCommData</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, buscomm_ctrl.o(i.BusComm_DecodeBusCommData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BusComm_DecodeBusCommData &rArr; BusComm_VerifyBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_VerifyBusCommData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_CANRxCallback
</UL>

<P><STRONG><a name="[c7]"></a>BusComm_GetBusDataPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buscomm_ctrl.o(i.BusComm_GetBusDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_Update
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_LimitYaw
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_yaw_relative_angle
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_yaw_ref
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ui_data
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_robot_id_power_limit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_mode
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_spd
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_pos
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_colling_data
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_lr
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_fb
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cap_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_17mm_data
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_yaw_ref
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ui_data
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_mode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_imu_spd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_imu_pos
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_chassis_lr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_chassis_fb
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_UpdataControlData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_GetRefereeSpeed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GestureFunction_2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GestureFunction_1
</UL>

<P><STRONG><a name="[9d]"></a>BusComm_InitBusComm</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, buscomm_ctrl.o(i.BusComm_InitBusComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BusComm_InitBusComm &rArr; BusComm_ResetBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_InitTxHeader
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_ResetBusCommData
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[9e]"></a>BusComm_ResetBusCommData</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, buscomm_ctrl.o(i.BusComm_ResetBusCommData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusComm_ResetBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_InitBusComm
</UL>

<P><STRONG><a name="[a0]"></a>BusComm_SendBusCommData</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, buscomm_ctrl.o(i.BusComm_SendBusCommData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BusComm_SendBusCommData &rArr; BusComm_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_Task
</UL>

<P><STRONG><a name="[77]"></a>BusComm_Task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.BusComm_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = BusComm_Task &rArr;  BusComm_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_SendBusCommData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>BusComm_Update</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, buscomm_ctrl.o(i.BusComm_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BusComm_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetIMUDataPtr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_GetGimbalControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_SendBusCommData
</UL>

<P><STRONG><a name="[9c]"></a>BusComm_VerifyBusCommData</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, buscomm_ctrl.o(i.BusComm_VerifyBusCommData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BusComm_VerifyBusCommData
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_DecodeBusCommData
</UL>

<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_RxMessageCallback &rArr; BusComm_CANRxCallback &rArr; BusComm_DecodeBusCommData &rArr; BusComm_VerifyBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_RxMessageCallback &rArr; BusComm_CANRxCallback &rArr; BusComm_DecodeBusCommData &rArr; BusComm_VerifyBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>CRC_VerifyIMU_HI229</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, crc_alg.o(i.CRC_VerifyIMU_HI229))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_DecodeIMUData
</UL>

<P><STRONG><a name="[a9]"></a>Can_InitFilterAndStart</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, can_util.o(i.Can_InitFilterAndStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Can_InitFilterAndStart &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[9f]"></a>Can_InitTxHeader</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can_util.o(i.Can_InitTxHeader))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotorGroup
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_InitBusComm
</UL>

<P><STRONG><a name="[ad]"></a>Can_RxMessageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, can_util.o(i.Can_RxMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Can_RxMessageCallback &rArr; BusComm_CANRxCallback &rArr; BusComm_DecodeBusCommData &rArr; BusComm_VerifyBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_EncoderDecodeCallback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_CANRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[af]"></a>Can_SendMessage</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_util.o(i.Can_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Can_SendMessage &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SendMotorGroupOutput
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_yaw_ref
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ui_data
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_mode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_imu_spd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_imu_pos
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_chassis_lr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_chassis_fb
</UL>

<P><STRONG><a name="[79]"></a>Chassis_Task</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.Chassis_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = Chassis_Task &rArr;  Chassis_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>Const_SetGimbalPitchMotorParam</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, const_lib.o(i.Const_SetGimbalPitchMotorParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Const_SetGimbalPitchMotorParam &rArr; Motor_InitMotorParam &rArr; PID_InitPIDParam
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotorParam
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init_Offset
</UL>

<P><STRONG><a name="[b3]"></a>Const_SetShooterPIDParam</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, const_lib.o(i.Const_SetShooterPIDParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Const_SetShooterPIDParam &rArr; Motor_InitMotorParam &rArr; PID_InitPIDParam
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotorParam
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooter
</UL>

<P><STRONG><a name="[28]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[b5]"></a>Filter_Bessel</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, filter_alg.o(i.Filter_Bessel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Filter_Bessel &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[170]"></a>Filter_LowPass</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, filter_alg.o(i.Filter_LowPass))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CalcPID
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_encoder_callback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ReadPWMEncoder
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetGimbalRef
</UL>

<P><STRONG><a name="[160]"></a>Filter_LowPassInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filter_alg.o(i.Filter_LowPassInit))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_InitPIDParam
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitControl
</UL>

<P><STRONG><a name="[b7]"></a>GPIO_Close</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_util.o(i.GPIO_Close))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ShootControl
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_Open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_util.o(i.GPIO_Open))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ShootControl
</UL>

<P><STRONG><a name="[ba]"></a>GimbalPitch_Output</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gim_gimbal_ctrl.o(i.GimbalPitch_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GimbalPitch_Output &rArr; Motor_SendMotorGroupOutput &rArr; Motor_SendMotorPWMOutput &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SendMotorGroupOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
</UL>

<P><STRONG><a name="[c5]"></a>Gimbal_ChangeMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gim_gimbal_ctrl.o(i.Gimbal_ChangeMode))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init_Offset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[bc]"></a>Gimbal_CtrlPitch</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, gim_gimbal_ctrl.o(i.Gimbal_CtrlPitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Gimbal_CtrlPitch &rArr; Motor_CalcMotorOutput &rArr; PID_CalcPID
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorRef
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorFdb
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ResetMotorPID
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutput
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_GetMiniPCDataPtr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetIMUDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
</UL>

<P><STRONG><a name="[cb]"></a>Gimbal_CtrlYaw</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gim_gimbal_ctrl.o(i.Gimbal_CtrlYaw))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
</UL>

<P><STRONG><a name="[a5]"></a>Gimbal_GetGimbalControlPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gim_gimbal_ctrl.o(i.Gimbal_GetGimbalControlPtr))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_CalcAutoAim
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetGimbalRef
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_Update
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[c2]"></a>Gimbal_Init_Offset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gim_gimbal_ctrl.o(i.Gimbal_Init_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Gimbal_Init_Offset &rArr; Const_SetGimbalPitchMotorParam &rArr; Motor_InitMotorParam &rArr; PID_InitPIDParam
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_InitAngelOffset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetIMUDataPtr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_ChangeMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Const_SetGimbalPitchMotorParam
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[19e]"></a>Gimbal_LimitPitch</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gim_gimbal_ctrl.o(i.Gimbal_LimitPitch))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[c6]"></a>Gimbal_LimitYaw</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gim_gimbal_ctrl.o(i.Gimbal_LimitYaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gimbal_LimitYaw
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetYawAutoRef
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[c8]"></a>Gimbal_SetPitchAutoRef</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gim_gimbal_ctrl.o(i.Gimbal_SetPitchAutoRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gimbal_SetPitchAutoRef
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_GetMiniPCDataPtr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetIMUDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetGimbalRef
</UL>

<P><STRONG><a name="[19f]"></a>Gimbal_SetPitchRef</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gim_gimbal_ctrl.o(i.Gimbal_SetPitchRef))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[c9]"></a>Gimbal_SetYawAutoRef</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gim_gimbal_ctrl.o(i.Gimbal_SetYawAutoRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gimbal_SetYawAutoRef &rArr; Gimbal_LimitYaw
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_GetMiniPCDataPtr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetIMUDataPtr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_LimitYaw
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetGimbalRef
</UL>

<P><STRONG><a name="[19d]"></a>Gimbal_SetYawRef</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gim_gimbal_ctrl.o(i.Gimbal_SetYawRef))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[76]"></a>Gimbal_Task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, freertos.o(i.Gimbal_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = Gimbal_Task &rArr;  Gimbal_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_CalcAutoAim
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_CtrlYaw
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_CtrlPitch
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalPitch_Output
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_InitFilterAndStart
</UL>

<P><STRONG><a name="[b0]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
</UL>

<P><STRONG><a name="[aa]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_InitFilterAndStart
</UL>

<P><STRONG><a name="[de]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[a2]"></a>HAL_CAN_GetTxMailboxesFreeLevel</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetTxMailboxesFreeLevel))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_SendBusCommData
</UL>

<P><STRONG><a name="[a6]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_RxMessageCallback &rArr; BusComm_CANRxCallback &rArr; BusComm_DecodeBusCommData &rArr; BusComm_VerifyBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_CAN_Init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can_util.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; Can_RxMessageCallback &rArr; BusComm_CANRxCallback &rArr; BusComm_DecodeBusCommData &rArr; BusComm_VerifyBusCommData
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_RxMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_CAN_Start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_InitFilterAndStart
</UL>

<P><STRONG><a name="[d3]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dac.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e8]"></a>HAL_DMA_Start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveDMA
</UL>

<P><STRONG><a name="[c4]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init_Offset
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooterMotor
</UL>

<P><STRONG><a name="[cf]"></a>HAL_GPIO_Init</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
</UL>

<P><STRONG><a name="[b8]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetLEDState
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Open
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Close
</UL>

<P><STRONG><a name="[9a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_SendBusCommData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_InitRemote
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_DecodeRemoteData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DecodeEncoder
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_ResetMiniPCData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_DecodeMiniPCPacket
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_InitIMU
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_DecodeIMUData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_UpdateControlData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetTargetFollowMode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_JudgeChange
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_yaw_relative_angle
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_yaw_ref
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ui_data
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_robot_id_power_limit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_mode
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_spd
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_pos
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_colling_data
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_lr
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_fb
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cap_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_17mm_data
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_yaw_ref
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ui_data
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_mode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_imu_spd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_imu_pos
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_chassis_lr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_chassis_fb
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_ResetBusCommData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_DecodeBusCommData
</UL>

<P><STRONG><a name="[113]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ea]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[eb]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ef]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 840 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[106]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, tim.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Encoder_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMDuty
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMFreq
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartPWM
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StopPWM
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[16e]"></a>HAL_UART_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SendHeartPacket
</UL>

<P><STRONG><a name="[114]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 654 bytes, Stack size 64 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendMessage_IT
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>IMU_DecodeIMUData</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, imu_periph.o(i.IMU_DecodeIMUData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IMU_DecodeIMUData &rArr; CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_VerifyIMU_HI229
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_RXCallback
</UL>

<P><STRONG><a name="[a4]"></a>IMU_GetIMUDataPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu_periph.o(i.IMU_GetIMUDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_CtrlPitch
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetGimbalRef
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetYawAutoRef
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetPitchAutoRef
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init_Offset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_Update
</UL>

<P><STRONG><a name="[c3]"></a>IMU_InitAngelOffset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, imu_periph.o(i.IMU_InitAngelOffset))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init_Offset
</UL>

<P><STRONG><a name="[11f]"></a>IMU_InitIMU</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, imu_periph.o(i.IMU_InitIMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IMU_InitIMU &rArr; Uart_ReceiveDMA &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_ResetIMUData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveDMA
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_InitUartDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[123]"></a>IMU_RXCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, imu_periph.o(i.IMU_RXCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IMU_RXCallback &rArr; IMU_DecodeIMUData &rArr; CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_DecodeIMUData
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DMACurrentDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxIdleCallback
</UL>

<P><STRONG><a name="[120]"></a>IMU_ResetIMUData</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, imu_periph.o(i.IMU_ResetIMUData))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_InitIMU
</UL>

<P><STRONG><a name="[125]"></a>Init_InitAll</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, init_ctrl.o(i.Init_InitAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Init_InitAll &rArr; Motor_InitAllMotors &rArr; Motor_InitMotor &rArr; PWM_SetPWMFreq &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_InitFilterAndStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_InitRemote
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitAllMotors
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitMiniPC
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_InitAllLEDs
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_InitIMU
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitControl
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init_Offset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_InitAllServos
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_InitBusComm
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remotr_RemotrControlInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>Kalman_CVInitSetPitch</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, kalman_alg.o(i.Kalman_CVInitSetPitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Kalman_CVInitSetPitch
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
</UL>

<P><STRONG><a name="[165]"></a>Kalman_CVInitSetYaw</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, kalman_alg.o(i.Kalman_CVInitSetYaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Kalman_CVInitSetYaw
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
</UL>

<P><STRONG><a name="[12e]"></a>Kalman_CVKalmanInit</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, kalman_alg.o(i.Kalman_CVKalmanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Kalman_CVKalmanInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitControl
</UL>

<P><STRONG><a name="[162]"></a>Kalman_CVKalmanInitPitchParam</STRONG> (Thumb, 242 bytes, Stack size 136 bytes, kalman_alg.o(i.Kalman_CVKalmanInitPitchParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Kalman_CVKalmanInitPitchParam
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitControl
</UL>

<P><STRONG><a name="[161]"></a>Kalman_CVKalmanInitYawParam</STRONG> (Thumb, 242 bytes, Stack size 136 bytes, kalman_alg.o(i.Kalman_CVKalmanInitYawParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Kalman_CVKalmanInitYawParam
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitControl
</UL>

<P><STRONG><a name="[130]"></a>Kalman_CalcCorrect</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, kalman_alg.o(i.Kalman_CalcCorrect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Kalman_CalcCorrect &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_MeasurementCalc
</UL>

<P><STRONG><a name="[134]"></a>Kalman_CalcKFGain</STRONG> (Thumb, 166 bytes, Stack size 96 bytes, kalman_alg.o(i.Kalman_CalcKFGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Kalman_CalcKFGain &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_MeasurementCalc
</UL>

<P><STRONG><a name="[136]"></a>Kalman_CalcPredict</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, kalman_alg.o(i.Kalman_CalcPredict))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Kalman_CalcPredict &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_NonMeasurementCalc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_MeasurementCalc
</UL>

<P><STRONG><a name="[137]"></a>Kalman_JudgeChange</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, kalman_alg.o(i.Kalman_JudgeChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Kalman_JudgeChange &rArr; Kalman_Predict_nT &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Predict_nT
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
</UL>

<P><STRONG><a name="[13a]"></a>Kalman_MeasurementCalc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kalman_alg.o(i.Kalman_MeasurementCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Kalman_MeasurementCalc &rArr; Kalman_CalcKFGain &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Update
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcPredict
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcKFGain
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcCorrect
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
</UL>

<P><STRONG><a name="[13c]"></a>Kalman_NonMeasurementCalc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kalman_alg.o(i.Kalman_NonMeasurementCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Kalman_NonMeasurementCalc &rArr; Kalman_CalcPredict &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CalcPredict
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
</UL>

<P><STRONG><a name="[138]"></a>Kalman_Predict_nT</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, kalman_alg.o(i.Kalman_Predict_nT))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Kalman_Predict_nT &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetGimbalRef
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_JudgeChange
</UL>

<P><STRONG><a name="[164]"></a>Kalman_TurnOffCVKF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kalman_alg.o(i.Kalman_TurnOffCVKF))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
</UL>

<P><STRONG><a name="[166]"></a>Kalman_TurnOnCVKF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kalman_alg.o(i.Kalman_TurnOnCVKF))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
</UL>

<P><STRONG><a name="[172]"></a>Kalman_TurnOnMeasureUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kalman_alg.o(i.Kalman_TurnOnMeasureUpdate), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_UpdateControlData
</UL>

<P><STRONG><a name="[13b]"></a>Kalman_Update</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, kalman_alg.o(i.Kalman_Update))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_MeasurementCalc
</UL>

<P><STRONG><a name="[126]"></a>LED_InitAllLEDs</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, led_periph.o(i.LED_InitAllLEDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_InitAllLEDs &rArr; LED_InitLED
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_InitLED
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[13d]"></a>LED_InitLED</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led_periph.o(i.LED_InitLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_InitLED
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_InitAllLEDs
</UL>

<P><STRONG><a name="[13e]"></a>LED_SetLEDState</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, led_periph.o(i.LED_SetLEDState), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>

<P><STRONG><a name="[13f]"></a>MX_ADC1_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>MX_CAN1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>MX_CAN2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>MX_DAC_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dac.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_DAC_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>MX_DMA_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 248 bytes, Stack size 304 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>MX_GPIO_Init</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>MX_TIM12_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tim.o(i.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_TIM12_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>MX_TIM1_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>MX_TIM2_Init</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>MX_TIM3_Init</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>MX_TIM4_Init</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>MX_TIM5_Init</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>MX_TIM8_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, tim.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>MX_TIM9_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tim.o(i.MX_TIM9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_TIM9_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>MX_UART5_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>Math_CalcSlopeRef</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, math_alg.o(i.Math_CalcSlopeRef))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[184]"></a>Math_Differential</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, math_alg.o(i.Math_Differential))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CalcPID
</UL>

<P><STRONG><a name="[1a3]"></a>Math_InitSlopeParam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, math_alg.o(i.Math_InitSlopeParam))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remotr_RemotrControlInit
</UL>

<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>MiniPC_ArmorPacketDecode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, minipc_periph.o(i.MiniPC_ArmorPacketDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MiniPC_ArmorPacketDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2i16
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_DecodeMiniPCPacket
</UL>

<P><STRONG><a name="[ca]"></a>MiniPC_CalcAutoAim</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gim_minipc_ctrl.o(i.MiniPC_CalcAutoAim))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MiniPC_CalcAutoAim &rArr; MiniPC_KalmanPrediction &rArr; Kalman_MeasurementCalc &rArr; Kalman_CalcKFGain &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetTargetFollowMode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetGimbalRef
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_KalmanPrediction
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_GetGimbalControlPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
</UL>

<P><STRONG><a name="[15d]"></a>MiniPC_ChangeAimMode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gim_minipc_ctrl.o(i.MiniPC_ChangeAimMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MiniPC_ChangeAimMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_GetMiniPCDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[15e]"></a>MiniPC_DecodeMiniPCPacket</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, minipc_periph.o(i.MiniPC_DecodeMiniPCPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MiniPC_DecodeMiniPCPacket &rArr; MiniPC_ArmorPacketDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_HeartPacketDecode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_ArmorPacketDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_RXCallback
</UL>

<P><STRONG><a name="[199]"></a>MiniPC_GetMiniPCControlDataPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gim_minipc_ctrl.o(i.MiniPC_GetMiniPCControlDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[bd]"></a>MiniPC_GetMiniPCDataPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, minipc_periph.o(i.MiniPC_GetMiniPCDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_CtrlPitch
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_UpdateControlData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SetGimbalRef
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_ChangeAimMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetYawAutoRef
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetPitchAutoRef
</UL>

<P><STRONG><a name="[15f]"></a>MiniPC_HeartPacketDecode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, minipc_periph.o(i.MiniPC_HeartPacketDecode))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_DecodeMiniPCPacket
</UL>

<P><STRONG><a name="[12b]"></a>MiniPC_InitControl</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gim_minipc_ctrl.o(i.MiniPC_InitControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MiniPC_InitControl &rArr; Kalman_CVKalmanInitYawParam
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LowPassInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CVKalmanInitYawParam
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CVKalmanInitPitchParam
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CVKalmanInit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[128]"></a>MiniPC_InitMiniPC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, minipc_periph.o(i.MiniPC_InitMiniPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MiniPC_InitMiniPC &rArr; Uart_ReceiveDMA &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_ResetMiniPCData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveDMA
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_InitUartDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[15b]"></a>MiniPC_KalmanPrediction</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, gim_minipc_ctrl.o(i.MiniPC_KalmanPrediction))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MiniPC_KalmanPrediction &rArr; Kalman_MeasurementCalc &rArr; Kalman_CalcKFGain &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetIMUDataPtr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_TurnOnCVKF
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_TurnOffCVKF
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_NonMeasurementCalc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_MeasurementCalc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_JudgeChange
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CVKalmanInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CVInitSetYaw
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_CVInitSetPitch
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_CalcAutoAim
</UL>

<P><STRONG><a name="[168]"></a>MiniPC_RXCallback</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, minipc_periph.o(i.MiniPC_RXCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MiniPC_RXCallback &rArr; MiniPC_DecodeMiniPCPacket &rArr; MiniPC_ArmorPacketDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_UpdateAutoAim
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_DecodeMiniPCPacket
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DMACurrentDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxIdleCallback
</UL>

<P><STRONG><a name="[163]"></a>MiniPC_ResetMiniPCData</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, minipc_periph.o(i.MiniPC_ResetMiniPCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MiniPC_ResetMiniPCData
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitMiniPC
</UL>

<P><STRONG><a name="[16a]"></a>MiniPC_SendHeartPacket</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, minipc_periph.o(i.MiniPC_SendHeartPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MiniPC_SendHeartPacket &rArr; MiniPC_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui162buff
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2ui16
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_Update
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendMessage_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_Task
</UL>

<P><STRONG><a name="[15c]"></a>MiniPC_SetGimbalRef</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, gim_minipc_ctrl.o(i.MiniPC_SetGimbalRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MiniPC_SetGimbalRef &rArr; Kalman_Predict_nT &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LowPass
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_GetMiniPCDataPtr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetIMUDataPtr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetYawAutoRef
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetPitchAutoRef
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_GetGimbalControlPtr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Predict_nT
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_CalcAutoAim
</UL>

<P><STRONG><a name="[15a]"></a>MiniPC_SetTargetFollowMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gim_minipc_ctrl.o(i.MiniPC_SetTargetFollowMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MiniPC_SetTargetFollowMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_CalcAutoAim
</UL>

<P><STRONG><a name="[7c]"></a>MiniPC_Task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.MiniPC_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = MiniPC_Task &rArr;  MiniPC_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SendHeartPacket
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>MiniPC_Update</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, minipc_periph.o(i.MiniPC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MiniPC_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SendHeartPacket
</UL>

<P><STRONG><a name="[169]"></a>MiniPC_UpdateAutoAim</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gim_minipc_ctrl.o(i.MiniPC_UpdateAutoAim))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_RXCallback
</UL>

<P><STRONG><a name="[171]"></a>MiniPC_UpdateControlData</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gim_minipc_ctrl.o(i.MiniPC_UpdateControlData), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_GetMiniPCDataPtr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_TurnOnMeasureUpdate
</UL>

<P><STRONG><a name="[c1]"></a>Motor_CalcMotorOutput</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, motor_periph.o(i.Motor_CalcMotorOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Motor_CalcMotorOutput &rArr; PID_CalcPID
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetPIDRef
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetPIDOutput
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CalcPID
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_CtrlPitch
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ShootControl
</UL>

<P><STRONG><a name="[176]"></a>Motor_CalcMotorOutputRingOverrided</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, motor_periph.o(i.Motor_CalcMotorOutputRingOverrided))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Motor_CalcMotorOutputRingOverrided &rArr; PID_CalcPID
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetPIDRef
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetPIDOutput
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CalcPID
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_FeederControl
</UL>

<P><STRONG><a name="[177]"></a>Motor_DecodeEncoder</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motor_periph.o(i.Motor_DecodeEncoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_DecodeEncoder
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_EncoderDecodeCallback
</UL>

<P><STRONG><a name="[ae]"></a>Motor_EncoderDecodeCallback</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, motor_periph.o(i.Motor_EncoderDecodeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_EncoderDecodeCallback &rArr; Motor_DecodeEncoder
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DecodeEncoder
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_RxMessageCallback
</UL>

<P><STRONG><a name="[178]"></a>Motor_GetMotorOutput</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, motor_periph.o(i.Motor_GetMotorOutput))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetPIDOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SendMotorPWMOutput
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SendMotorGroupOutput
</UL>

<P><STRONG><a name="[129]"></a>Motor_InitAllMotors</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, motor_periph.o(i.Motor_InitAllMotors))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Motor_InitAllMotors &rArr; Motor_InitMotor &rArr; PWM_SetPWMFreq &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotorGroup
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[17a]"></a>Motor_InitMotor</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, motor_periph.o(i.Motor_InitMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Motor_InitMotor &rArr; PWM_SetPWMFreq &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ClearPID
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LowPassInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartPWM
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMFreq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMDuty
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitAllMotors
</UL>

<P><STRONG><a name="[179]"></a>Motor_InitMotorGroup</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, motor_periph.o(i.Motor_InitMotorGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_InitMotorGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_InitTxHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitAllMotors
</UL>

<P><STRONG><a name="[b2]"></a>Motor_InitMotorParam</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, motor_periph.o(i.Motor_InitMotorParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Motor_InitMotorParam &rArr; PID_InitPIDParam
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_InitPIDParam
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Const_SetShooterPIDParam
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Const_SetGimbalPitchMotorParam
</UL>

<P><STRONG><a name="[181]"></a>Motor_ReadPWMEncoder</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, motor_periph.o(i.Motor_ReadPWMEncoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_ReadPWMEncoder
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LowPass
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorFdb
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_UpdataControlData
</UL>

<P><STRONG><a name="[be]"></a>Motor_ResetMotorPID</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, motor_periph.o(i.Motor_ResetMotorPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_ResetMotorPID
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ClearPID
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_CtrlPitch
</UL>

<P><STRONG><a name="[bb]"></a>Motor_SendMotorGroupOutput</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, motor_periph.o(i.Motor_SendMotorGroupOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Motor_SendMotorGroupOutput &rArr; Motor_SendMotorPWMOutput &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SendMotorPWMOutput
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetMotorOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalPitch_Output
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooterMotor
</UL>

<P><STRONG><a name="[182]"></a>Motor_SendMotorPWMOutput</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, motor_periph.o(i.Motor_SendMotorPWMOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Motor_SendMotorPWMOutput &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetMotorOutput
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SendMotorGroupOutput
</UL>

<P><STRONG><a name="[c0]"></a>Motor_SetMotorFdb</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, motor_periph.o(i.Motor_SetMotorFdb))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetPIDFdb
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_CtrlPitch
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_encoder_callback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feeder_encoder_callback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_encoder_callback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ReadPWMEncoder
</UL>

<P><STRONG><a name="[bf]"></a>Motor_SetMotorRef</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, motor_periph.o(i.Motor_SetMotorRef))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetPIDRef
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_CtrlPitch
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ShootControl
</UL>

<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>PID_AddPIDRef</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pid_alg.o(i.PID_AddPIDRef))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feeder_encoder_callback
</UL>

<P><STRONG><a name="[173]"></a>PID_CalcPID</STRONG> (Thumb, 688 bytes, Stack size 72 bytes, pid_alg.o(i.PID_CalcPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PID_CalcPID
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LowPass
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Differential
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutputRingOverrided
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutput
</UL>

<P><STRONG><a name="[17b]"></a>PID_ClearPID</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pid_alg.o(i.PID_ClearPID))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ResetMotorPID
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
</UL>

<P><STRONG><a name="[174]"></a>PID_GetPIDOutput</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_alg.o(i.PID_GetPIDOutput))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetMotorOutput
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutputRingOverrided
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutput
</UL>

<P><STRONG><a name="[180]"></a>PID_InitPIDParam</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, pid_alg.o(i.PID_InitPIDParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_InitPIDParam
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LowPassInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotorParam
</UL>

<P><STRONG><a name="[183]"></a>PID_SetPIDFdb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_alg.o(i.PID_SetPIDFdb))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorFdb
</UL>

<P><STRONG><a name="[175]"></a>PID_SetPIDRef</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_alg.o(i.PID_SetPIDRef))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorRef
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutputRingOverrided
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutput
</UL>

<P><STRONG><a name="[17c]"></a>PWM_InitPWM</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pwm_util.o(i.PWM_InitPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PWM_InitPWM &rArr; PWM_SetPWMFreq &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_InitServo
</UL>

<P><STRONG><a name="[17e]"></a>PWM_SetPWMDuty</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pwm_util.o(i.PWM_SetPWMDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StopPWM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SendMotorPWMOutput
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMFreq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_SetServoAngle
</UL>

<P><STRONG><a name="[17d]"></a>PWM_SetPWMFreq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pwm_util.o(i.PWM_SetPWMFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PWM_SetPWMFreq &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StopPWM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartPWM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitPWM
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_InitServo
</UL>

<P><STRONG><a name="[17f]"></a>PWM_StartPWM</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm_util.o(i.PWM_StartPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_StartPWM &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_InitMotor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMFreq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMDuty
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_StartServo
</UL>

<P><STRONG><a name="[185]"></a>PWM_StopPWM</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm_util.o(i.PWM_StopPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_StopPWM &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMFreq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMDuty
</UL>

<P><STRONG><a name="[7d]"></a>Referee_Task</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.Referee_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = Referee_Task &rArr;  Referee_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>Remote_CancelChannelOffset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, remote_periph.o(i.Remote_CancelChannelOffset))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_DecodeRemoteData
</UL>

<P><STRONG><a name="[186]"></a>Remote_ControlCom</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gim_remote_ctrl.o(i.Remote_ControlCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Remote_ControlCom &rArr; Remote_KeyMouseProcess &rArr; Filter_Bessel &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GetRemoteDataPtr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_ChangeAimMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_ChangeMode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_GetShooterControlPtr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteShooterModeSet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_MouseShooterModeSet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Task
</UL>

<P><STRONG><a name="[190]"></a>Remote_DecodeKeyboardData</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, remote_periph.o(i.Remote_DecodeKeyboardData))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ResetRemoteData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_DecodeRemoteData
</UL>

<P><STRONG><a name="[18e]"></a>Remote_DecodeRemoteData</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, remote_periph.o(i.Remote_DecodeRemoteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Remote_DecodeRemoteData &rArr; Remote_ResetRemoteData
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ResetRemoteData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_IsRemoteError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_DecodeKeyboardData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_CancelChannelOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RXCallback
</UL>

<P><STRONG><a name="[18d]"></a>Remote_Gesture</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gim_remote_ctrl.o(i.Remote_Gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Remote_Gesture &rArr; Remote_GestureFunction_4 &rArr; Servo_SetServoAngle &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Gesturejudge
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GestureFunction_4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GestureFunction_3
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GestureFunction_2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GestureFunction_1
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
</UL>

<P><STRONG><a name="[194]"></a>Remote_GestureFunction_1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gim_remote_ctrl.o(i.Remote_GestureFunction_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Remote_GestureFunction_1
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Gesture
</UL>

<P><STRONG><a name="[195]"></a>Remote_GestureFunction_2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gim_remote_ctrl.o(i.Remote_GestureFunction_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Remote_GestureFunction_2
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Gesture
</UL>

<P><STRONG><a name="[196]"></a>Remote_GestureFunction_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gim_remote_ctrl.o(i.Remote_GestureFunction_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Remote_GestureFunction_3 &rArr; Servo_SetServoAngle &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_SetServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Gesture
</UL>

<P><STRONG><a name="[197]"></a>Remote_GestureFunction_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gim_remote_ctrl.o(i.Remote_GestureFunction_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Remote_GestureFunction_4 &rArr; Servo_SetServoAngle &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_SetServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Gesture
</UL>

<P><STRONG><a name="[193]"></a>Remote_Gesturejudge</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, gim_remote_ctrl.o(i.Remote_Gesturejudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Remote_Gesturejudge
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GetRemoteDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Gesture
</UL>

<P><STRONG><a name="[188]"></a>Remote_GetRemoteDataPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, remote_periph.o(i.Remote_GetRemoteDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteShooterModeSet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_MouseShooterModeSet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Gesturejudge
</UL>

<P><STRONG><a name="[12c]"></a>Remote_InitRemote</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, remote_periph.o(i.Remote_InitRemote))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Remote_InitRemote &rArr; Uart_ReceiveDMA &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ResetRemoteData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveDMA
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_InitUartDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[191]"></a>Remote_IsRemoteError</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, remote_periph.o(i.Remote_IsRemoteError))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_DecodeRemoteData
</UL>

<P><STRONG><a name="[18b]"></a>Remote_KeyMouseProcess</STRONG> (Thumb, 624 bytes, Stack size 48 bytes, gim_remote_ctrl.o(i.Remote_KeyMouseProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Remote_KeyMouseProcess &rArr; Filter_Bessel &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GetRemoteDataPtr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_GetMiniPCControlDataPtr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_ChangeAimMode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetYawRef
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetPitchRef
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_LimitYaw
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_LimitPitch
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_GetGimbalControlPtr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_ChangeMode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Bessel
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_CalcSlopeRef
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_SetServoAngle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_GetServoAngle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ChangeShooterMode
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
</UL>

<P><STRONG><a name="[18c]"></a>Remote_MouseShooterModeSet</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, gim_remote_ctrl.o(i.Remote_MouseShooterModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Remote_MouseShooterModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GetRemoteDataPtr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_SingleShootReset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_GetShooterControlPtr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ChangeFeederMode
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
</UL>

<P><STRONG><a name="[1a2]"></a>Remote_RXCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, remote_periph.o(i.Remote_RXCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Remote_RXCallback &rArr; Remote_DecodeRemoteData &rArr; Remote_ResetRemoteData
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_DecodeRemoteData
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DMACurrentDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxIdleCallback
</UL>

<P><STRONG><a name="[189]"></a>Remote_RemoteProcess</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, gim_remote_ctrl.o(i.Remote_RemoteProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Remote_RemoteProcess &rArr; Filter_Bessel &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GetRemoteDataPtr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetYawRef
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_SetPitchRef
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_LimitYaw
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_LimitPitch
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Bessel
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_SetServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
</UL>

<P><STRONG><a name="[18a]"></a>Remote_RemoteShooterModeSet</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gim_remote_ctrl.o(i.Remote_RemoteShooterModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Remote_RemoteShooterModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GetRemoteDataPtr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ChangeShooterMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ChangeFeederMode
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
</UL>

<P><STRONG><a name="[192]"></a>Remote_ResetRemoteData</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, remote_periph.o(i.Remote_ResetRemoteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Remote_ResetRemoteData
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_DecodeKeyboardData
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_InitRemote
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_DecodeRemoteData
</UL>

<P><STRONG><a name="[78]"></a>Remote_Task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.Remote_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = Remote_Task &rArr;  Remote_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>Remotr_RemotrControlInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gim_remote_ctrl.o(i.Remotr_RemotrControlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Remotr_RemotrControlInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_InitSlopeParam
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[19a]"></a>Servo_GetServoAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, servo_periph.o(i.Servo_GetServoAngle))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[127]"></a>Servo_InitAllServos</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, servo_periph.o(i.Servo_InitAllServos))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Servo_InitAllServos &rArr; Servo_InitServo &rArr; PWM_SetPWMFreq &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_InitServo
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[1a4]"></a>Servo_InitServo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, servo_periph.o(i.Servo_InitServo))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Servo_InitServo &rArr; PWM_SetPWMFreq &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMFreq
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InitPWM
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_StartServo
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_SetServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_InitAllServos
</UL>

<P><STRONG><a name="[198]"></a>Servo_SetServoAngle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, servo_periph.o(i.Servo_SetServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Servo_SetServoAngle &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPWMDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_InitServo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GestureFunction_4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_GestureFunction_3
</UL>

<P><STRONG><a name="[1a5]"></a>Servo_StartServo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, servo_periph.o(i.Servo_StartServo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Servo_StartServo &rArr; PWM_StartPWM &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_InitServo
</UL>

<P><STRONG><a name="[7b]"></a>Shoot_Task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.Shoot_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = Shoot_Task &rArr;  Shoot_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_Control
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>Shooter_AngleCorrect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_AngleCorrect))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_HeatCtrl
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ChangeFeederMode
</UL>

<P><STRONG><a name="[1a0]"></a>Shooter_ChangeFeederMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_ChangeFeederMode))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_AngleCorrect
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteShooterModeSet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_MouseShooterModeSet
</UL>

<P><STRONG><a name="[19b]"></a>Shooter_ChangeShooterMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_ChangeShooterMode))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RemoteShooterModeSet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_KeyMouseProcess
</UL>

<P><STRONG><a name="[1a6]"></a>Shooter_Control</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gim_shoot_ctrl.o(i.Shooter_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Shooter_Control &rArr; Shooter_FeederControl &rArr; Shooter_HeatCtrl &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_UpdataControlData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ShootControl
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_FeederControl
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_Task
</UL>

<P><STRONG><a name="[1aa]"></a>Shooter_FeederControl</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, gim_shoot_ctrl.o(i.Shooter_FeederControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Shooter_FeederControl &rArr; Shooter_HeatCtrl &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutputRingOverrided
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_SingleShootCtrl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_SetFeederSpeed
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_MotorLockedHandle
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_HeatCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_Control
</UL>

<P><STRONG><a name="[1b2]"></a>Shooter_FeederMotorLockedJudge</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_FeederMotorLockedJudge))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_UpdataControlData
</UL>

<P><STRONG><a name="[1af]"></a>Shooter_GetRefereeSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gim_shoot_ctrl.o(i.Shooter_GetRefereeSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Shooter_GetRefereeSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ShootControl
</UL>

<P><STRONG><a name="[187]"></a>Shooter_GetShooterControlPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_GetShooterControlPtr))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_ControlCom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_MouseShooterModeSet
</UL>

<P><STRONG><a name="[1ae]"></a>Shooter_HeatCtrl</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gim_shoot_ctrl.o(i.Shooter_HeatCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Shooter_HeatCtrl &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_SingleShootCtrl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_SetFeederSpeed
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_AngleCorrect
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_FeederControl
</UL>

<P><STRONG><a name="[12a]"></a>Shooter_InitShooter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gim_shoot_ctrl.o(i.Shooter_InitShooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Shooter_InitShooter &rArr; Shooter_InitShooterMotor &rArr; Motor_SendMotorGroupOutput &rArr; Motor_SendMotorPWMOutput &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Const_SetShooterPIDParam
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooterMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
</UL>

<P><STRONG><a name="[1b0]"></a>Shooter_InitShooterMotor</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gim_shoot_ctrl.o(i.Shooter_InitShooterMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Shooter_InitShooterMotor &rArr; Motor_SendMotorGroupOutput &rArr; Motor_SendMotorPWMOutput &rArr; PWM_SetPWMDuty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SendMotorGroupOutput
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_InitShooter
</UL>

<P><STRONG><a name="[1ad]"></a>Shooter_MotorLockedHandle</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, gim_shoot_ctrl.o(i.Shooter_MotorLockedHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Shooter_MotorLockedHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_SetFeederSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_FeederControl
</UL>

<P><STRONG><a name="[1ac]"></a>Shooter_SetFeederSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_SetFeederSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_MotorLockedHandle
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_HeatCtrl
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_FeederControl
</UL>

<P><STRONG><a name="[1b1]"></a>Shooter_SetShooterSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_SetShooterSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_ShootControl
</UL>

<P><STRONG><a name="[1a9]"></a>Shooter_ShootControl</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gim_shoot_ctrl.o(i.Shooter_ShootControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Shooter_ShootControl &rArr; Motor_CalcMotorOutput &rArr; PID_CalcPID
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorRef
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CalcMotorOutput
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Open
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Close
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_SetShooterSpeed
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_GetRefereeSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_Control
</UL>

<P><STRONG><a name="[1ab]"></a>Shooter_SingleShootCtrl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_SingleShootCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_HeatCtrl
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_FeederControl
</UL>

<P><STRONG><a name="[1a1]"></a>Shooter_SingleShootReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gim_shoot_ctrl.o(i.Shooter_SingleShootReset))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_MouseShooterModeSet
</UL>

<P><STRONG><a name="[1a8]"></a>Shooter_UpdataControlData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gim_shoot_ctrl.o(i.Shooter_UpdataControlData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Shooter_UpdataControlData &rArr; Motor_ReadPWMEncoder
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ReadPWMEncoder
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_FeederMotorLockedJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_Control
</UL>

<P><STRONG><a name="[75]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SuperCap_Task</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.SuperCap_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = SuperCap_Task &rArr;  SuperCap_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>SystemClock_Config</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>TIM7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[100]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
</UL>

<P><STRONG><a name="[f9]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[10c]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART5_IRQHandler &rArr; Uart_ReceiveHandler &rArr; Uart_RxIdleCallback &rArr; IMU_RXCallback &rArr; IMU_DecodeIMUData &rArr; CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART1_IRQHandler &rArr; Uart_ReceiveHandler &rArr; Uart_RxIdleCallback &rArr; IMU_RXCallback &rArr; IMU_DecodeIMUData &rArr; CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART3_IRQHandler &rArr; Uart_ReceiveHandler &rArr; Uart_RxIdleCallback &rArr; IMU_RXCallback &rArr; IMU_DecodeIMUData &rArr; CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART6_IRQHandler &rArr; Uart_ReceiveHandler &rArr; Uart_RxIdleCallback &rArr; IMU_RXCallback &rArr; IMU_DecodeIMUData &rArr; CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>Uart_DMACurrentDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_util.o(i.Uart_DMACurrentDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RXCallback
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_RXCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_RXCallback
</UL>

<P><STRONG><a name="[121]"></a>Uart_InitUartDMA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_util.o(i.Uart_InitUartDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_InitUartDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_InitRemote
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitMiniPC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_InitIMU
</UL>

<P><STRONG><a name="[122]"></a>Uart_ReceiveDMA</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart_util.o(i.Uart_ReceiveDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Uart_ReceiveDMA &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_InitRemote
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_InitMiniPC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_InitIMU
</UL>

<P><STRONG><a name="[1b5]"></a>Uart_ReceiveHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_util.o(i.Uart_ReceiveHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Uart_ReceiveHandler &rArr; Uart_RxIdleCallback &rArr; IMU_RXCallback &rArr; IMU_DecodeIMUData &rArr; CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxIdleCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>Uart_RxIdleCallback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_util.o(i.Uart_RxIdleCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Uart_RxIdleCallback &rArr; IMU_RXCallback &rArr; IMU_DecodeIMUData &rArr; CRC_VerifyIMU_HI229 &rArr; crc16_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_RXCallback
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_RXCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_RXCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveHandler
</UL>

<P><STRONG><a name="[16f]"></a>Uart_SendMessage_IT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_util.o(i.Uart_SendMessage_IT))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SendHeartPacket
</UL>

<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>WatchDog_FeedDog</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog_ctrl.o(i.WatchDog_FeedDog))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Task
</UL>

<P><STRONG><a name="[7e]"></a>WatchDog_Task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.WatchDog_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = WatchDog_Task &rArr;  WatchDog_Task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_FeedDog
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1bd]"></a>_cmd_mode_control</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, buscomm_ctrl.o(i._cmd_mode_control))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_mode
</UL>

<P><STRONG><a name="[1be]"></a>_cmd_ui_mode_control</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, buscomm_ctrl.o(i._cmd_ui_mode_control))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ui_data
</UL>

<P><STRONG><a name="[1bc]"></a>buff2float</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buff_lib.o(i.buff2float))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_yaw_relative_angle
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_yaw_ref
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ui_data
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_spd
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_imu_pos
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_lr
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_cha_fb
</UL>

<P><STRONG><a name="[159]"></a>buff2i16</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buff_lib.o(i.buff2i16))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_ArmorPacketDecode
</UL>

<P><STRONG><a name="[16c]"></a>buff2ui16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buff_lib.o(i.buff2ui16))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SendHeartPacket
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_colling_data
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_17mm_data
</UL>

<P><STRONG><a name="[6f]"></a>chassis_encoder_callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor_periph.o(i.chassis_encoder_callback))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorFdb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_periph.o(i.Motor_InitAllMotors)
</UL>
<P><STRONG><a name="[a8]"></a>crc16_verify</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, crc_alg.o(i.crc16_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_VerifyIMU_HI229
</UL>

<P><STRONG><a name="[71]"></a>feeder_encoder_callback</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, motor_periph.o(i.feeder_encoder_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = feeder_encoder_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_AddPIDRef
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorFdb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_periph.o(i.Motor_InitAllMotors)
</UL>
<P><STRONG><a name="[1bb]"></a>float2buff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buff_lib.o(i.float2buff))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_yaw_ref
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ui_data
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_imu_spd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_imu_pos
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_chassis_lr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_chassis_fb
</UL>

<P><STRONG><a name="[70]"></a>gimbal_encoder_callback</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, motor_periph.o(i.gimbal_encoder_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gimbal_encoder_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_LowPass
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotorFdb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_periph.o(i.Motor_InitAllMotors)
</UL>
<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_InitAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a3]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_Task
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Task
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_Task
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Task
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_Task
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Task
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Task
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_Task
</UL>

<P><STRONG><a name="[1c0]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>osMessageCreate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[149]"></a>osThreadCreate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1d7]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d6]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[72]"></a>shooter_encoder_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_periph.o(i.shooter_encoder_callback))
<BR>[Address Reference Count : 1]<UL><LI> motor_periph.o(i.Motor_InitAllMotors)
</UL>
<P><STRONG><a name="[16d]"></a>ui162buff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, buff_lib.o(i.ui162buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui162buff
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiniPC_SendHeartPacket
</UL>

<P><STRONG><a name="[1c9]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1dc]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1ce]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1d5]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1cb]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1ca]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1cd]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1cf]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1d1]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1de]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1c1]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1c2]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1d8]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[81]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1dd]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1c4]"></a>xQueueGenericCreate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[1c3]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[1d3]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1c7]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1c6]"></a>xTaskCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1b3]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e1]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1db]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ce]"></a>ADC_Init</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[e7]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[e6]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[e9]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[f2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[fc]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[10b]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[10d]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[10e]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[fa]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[fb]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[6e]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[116]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>UART_SetConfig</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[119]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1c8]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1cc]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d0]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[74]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1d4]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1e2]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1c5]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1d9]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1da]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[73]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[d]"></a>_send_chassis_fb</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, buscomm_cmd.o(i._send_chassis_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _send_chassis_fb &rArr; Can_SendMessage &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>_send_chassis_lr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, buscomm_cmd.o(i._send_chassis_lr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _send_chassis_lr &rArr; Can_SendMessage &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>_send_imu_pos</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, buscomm_cmd.o(i._send_imu_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _send_imu_pos &rArr; Can_SendMessage &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_send_imu_spd</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, buscomm_cmd.o(i._send_imu_spd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _send_imu_spd &rArr; Can_SendMessage &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>_send_mode</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, buscomm_cmd.o(i._send_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _send_mode &rArr; Can_SendMessage &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>_send_ui_data</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, buscomm_cmd.o(i._send_ui_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _send_ui_data &rArr; Can_SendMessage &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>_send_yaw_ref</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, buscomm_cmd.o(i._send_yaw_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _send_yaw_ref &rArr; Can_SendMessage &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SendMessage
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>_set_17mm_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_17mm_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_17mm_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2ui16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_set_cap_state</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_cap_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_cap_state
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_set_cha_fb</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_cha_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_cha_fb
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_set_cha_lr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_cha_lr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_cha_lr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>_set_colling_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_colling_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_colling_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2ui16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>_set_imu_pos</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_imu_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_imu_pos
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>_set_imu_spd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_imu_spd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_imu_spd
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>_set_mode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_mode_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>_set_robot_id_power_limit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_robot_id_power_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_robot_id_power_limit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>_set_ui_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_ui_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_ui_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_ui_mode_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>_set_yaw_ref</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_yaw_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_yaw_ref
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>_set_yaw_relative_angle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buscomm_cmd.o(i._set_yaw_relative_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_yaw_relative_angle
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusComm_GetBusDataPtr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff2float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buscomm_cmd.o(.data)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
